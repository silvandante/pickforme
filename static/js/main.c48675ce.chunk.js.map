{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","option","inputFields","setInputFields","pickButton","setPickButton","randomItemPicked","setRandomItemPicked","handleSubmit","e","preventDefault","randomItem","Math","floor","random","length","document","getElementById","classList","add","rowLength","className","href","disabled","onSubmit","map","inputField","index","key","id","htmlFor","type","onChange","event","values","target","value","handleInputChange","name","onClick","splice","handleRemoveFields","push","handleAddFields","remove","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6LAuIeA,G,MAnIH,WAEV,IAFgB,EAIsBC,mBAAS,CAC7C,CAAEC,OAAQ,IACV,CAAEA,OAAQ,MANI,mBAITC,EAJS,KAIIC,EAJJ,OASoBH,oBAAS,GAT7B,mBASTI,EATS,KASGC,EATH,OAUgCL,mBAAS,MAVzC,mBAUTM,EAVS,KAUSC,EAVT,KAYVC,EAAe,SAAAC,GACnBA,EAAEC,iBACFL,GAAc,GACd,IAAIM,EAAaC,KAAKC,MAAMD,KAAKE,SAASZ,EAAYa,QACtDR,EAAoBI,GAEpB,IAAIV,EAASe,SAASC,eAAe,UAAUN,GAC/CV,EAAOiB,UAAUC,IAAI,UACrBlB,EAAOiB,UAAUC,IAAI,kBACrBlB,EAAOiB,UAAUC,IAAI,QA+BjBC,EAAYlB,EAAYa,OAE9B,OACE,oCACA,yBAAKM,UAAU,iCACb,uBAAGA,UAAU,eAAeC,KAAK,KAC/B,4BAAQD,UAAU,0BAA0BE,UAAQ,GAApD,OACA,+CAEF,uBAAGF,UAAU,eAAeC,KAAK,+CAAjC,mBAIF,yBAAKD,UAAU,iBACb,yBAAKA,UAAU,qBACb,6DACA,uFACA,yHAEF,0BAAMG,SAAUhB,GACd,yBAAKa,UAAU,YACZnB,EAAYuB,KAAI,SAACC,EAAYC,GAAb,OACf,kBAAC,WAAD,CAAUC,IAAG,UAAKF,EAAL,YAAmBC,IAC9B,yBAAKE,GAAE,iBAAYF,GAASN,UAAU,wBACpC,2BAAOS,QAAQ,UAAf,UAAgCH,EAAM,GACtC,2BACEI,KAAK,OACLC,SAAU,SAAAC,GAAK,OAvDL,SAACN,EAAOM,GAChC,IAAMC,EAAM,YAAOhC,GACjBgC,EAAOP,GAAO1B,OAASgC,EAAME,OAAOC,MACtCjC,EAAe+B,GAoDkBG,CAAkBV,EAAOM,IAC5CZ,UAAU,eACVQ,GAAG,SACHS,KAAK,SACLF,MAAOV,EAAWzB,UAGpBG,GAAcgB,IAAYO,EAAM,GAClC,yBAAKN,UAAU,uBACX,4BACEA,UAAU,eACVU,KAAK,SACLQ,QAAS,kBAvDA,SAAAZ,GACzB,GAAGA,GAnCW,EAmCI,CAChB,IAAMO,EAAM,YAAOhC,GACnBgC,EAAOM,OAAOb,EAAO,GACrBxB,EAAe+B,IAmDcO,CAAmBd,KAHpC,KAOA,4BACEN,UAAU,eACVU,KAAK,SACLQ,QAAS,kBApEH,WACtB,IAAML,EAAM,YAAOhC,GACnBgC,EAAOQ,KAAK,CAAEzC,OAAQ,KACtBE,EAAe+B,GAiEgBS,KAHjB,WAYV,yBAAKtB,UAAU,iBACZjB,GACD,4BACEiB,UAAU,uBACVkB,QAAS/B,GAFX,gBAOEJ,GACF,4BACEiB,UAAU,uBACVkB,QA3Ea,WACrB,IAAItC,EAASe,SAASC,eAAe,UAAUX,GAC/CL,EAAOiB,UAAU0B,OAAO,UACxB3C,EAAOiB,UAAU0B,OAAO,kBACxB3C,EAAOiB,UAAU0B,OAAO,OACxBvC,GAAc,KAoER,mBC7GUwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpC,SAASC,eAAe,SDyHpB,kBAAmBoC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c48675ce.chunk.js","sourcesContent":["import React, { useState, Fragment } from \"react\";\n\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nconst App = () => {\n\n  const minSize = 2;\n\n  const [inputFields, setInputFields] = useState([\n    { option: '' },\n    { option: '' }\n  ]);\n  \n  const [pickButton, setPickButton] = useState(true)\n  const [randomItemPicked, setRandomItemPicked] = useState(null)\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setPickButton(false)\n    var randomItem = Math.floor(Math.random()*inputFields.length)\n    setRandomItemPicked(randomItem)\n    //var randomItem = inputFields[Math.floor(Math.random()*inputFields.length)] \n    var option = document.getElementById('option_'+randomItem);\n    option.classList.add(\"border\");\n    option.classList.add(\"border-primary\");\n    option.classList.add(\"p-3\");\n  };\n\n  const handleInputChange = (index, event) => {\n    const values = [...inputFields];\n      values[index].option = event.target.value;\n    setInputFields(values);\n  };\n\n  const handleAddFields = () => {\n    const values = [...inputFields];\n    values.push({ option: ''});\n    setInputFields(values);\n  };\n\n  const handleRemoveFields = index => {\n    if(index>=minSize){\n      const values = [...inputFields];\n      values.splice(index, 1);\n      setInputFields(values);\n    }\n  };\n\n  const handleTryAgain = () => {\n    var option = document.getElementById('option_'+randomItemPicked);\n    option.classList.remove(\"border\");\n    option.classList.remove(\"border-primary\");\n    option.classList.remove(\"p-3\");\n    setPickButton(true);\n  }\n\n  const rowLength = inputFields.length;\n\n  return (\n    <>\n    <nav className=\"navbar navbar-dark bg-primary\">\n      <a className=\"navbar-brand\" href=\"#\">\n        <button className=\"btn btn-light text-info\" disabled>PFM</button>\n        <span> Pick For Me</span>\n      </a>\n      <a className=\"navbar-brand\" href=\"https://silvandante.github.io/meuportfolio/\">\n        By Anny Walker\n      </a>\n    </nav>\n    <div className=\"container p-5\">\n      <div className=\"jumbotron t-0 p-3\" >\n        <h1>Pick For Me (Escolha por Mim)</h1>\n        <p>Write 2 or more options for me to pick 1 option for you.</p>\n        <p>(Escreva 2 ou mais opções para mim que eu vou escolher 1 opção para você.)</p>\n      </div>\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-row\">\n          {inputFields.map((inputField, index) => (\n            <Fragment key={`${inputField}~${index}`}>\n              <div id={`option_${index}`} className=\"form-group col-sm-10\">\n                <label htmlFor=\"option\">Option {index+1}</label>\n                <input\n                  type=\"text\"\n                  onChange={event => handleInputChange(index, event)}\n                  className=\"form-control\"\n                  id=\"option\"\n                  name=\"option\"\n                  value={inputField.option}\n                />\n              </div>\n              {(pickButton)&&(rowLength===index+1)&&\n              <div className=\"form-group col-sm-2\">\n                  <button\n                    className=\"btn btn-link\"\n                    type=\"button\"\n                    onClick={() => handleRemoveFields(index)}\n                  >\n                    -\n                  </button>\n                  <button\n                    className=\"btn btn-link\"\n                    type=\"button\"\n                    onClick={() => handleAddFields()}\n                  >\n                    +\n                  </button>\n              </div>\n            }\n            </Fragment>\n          ))}\n        </div>\n        <div className=\"submit-button\">\n          {pickButton&&\n          <button\n            className=\"btn btn-primary mr-2\"\n            onClick={handleSubmit}\n          >\n            Pick For Me\n          </button>\n          }\n          {!pickButton&&\n          <button\n            className=\"btn btn-primary mr-2\"\n            onClick={handleTryAgain}\n          >\n            Try Again\n          </button>}\n          \n        </div>\n      </form>\n    </div>\n    </>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}